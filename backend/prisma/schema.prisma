generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String?
  password      String
  ownedBoards   Board[]        @relation("OwnedBoards")
  boardMembers  BoardMember[]
  assignedCards Card[]         @relation("AssignedCards")
  comments      Comment[]
  createdAt     DateTime       @default(now())
}

model Board {
  id        Int           @id @default(autoincrement())
  title     String
  ownerId   Int
  owner     User          @relation("OwnedBoards", fields: [ownerId], references: [id], onDelete: Cascade)
  lists     List[]
  members   BoardMember[]
}

model BoardMember {
  id      Int   @id @default(autoincrement())
  boardId Int
  userId  Int
  board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([boardId, userId])
}

model List {
  id        Int      @id @default(autoincrement())
  title     String
  position  Int
  boardId   Int
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards     Card[]
}

model Card {
  id           Int       @id @default(autoincrement())
  title        String
  description  String?
  position     Int
  listId       Int
  list         List      @relation(fields: [listId], references: [id], onDelete: Cascade)
  assignedToId Int?
  assignedTo   User?     @relation("AssignedCards", fields: [assignedToId], references: [id], onDelete: SetNull)
  labels       Label[]
  comments     Comment[]
}

model Label {
  id     Int    @id @default(autoincrement())
  name   String
  color  String
  cardId Int
  card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  cardId    Int
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}